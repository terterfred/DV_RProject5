dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
# Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                        \_/
df$Order_Date <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Order_Date), tz="UTC")))
df$Ship_Date  <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Ship_Date),  tz="UTC")))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
tbl_df(diamonds)
require(tidyr)
require(dplyr)
require(ggplot2)
tbl_df(diamonds)
View(diamonds)
diamonds %>% select(cut, clarity) %>% tbl_df
diamonds %>% select(., cut, clarity) %>% tbl_df
diamonds %>% select(color:price) %>% tbl_df
diamonds %>% select(-cut, -clarity) %>% tbl_df
x <- diamonds %>% select(cut, clarity) %>% tbl_df
x <- diamonds %>% select(cut, clarity) %>% tbl_df
x
pmin(c(1:5), (5:1)) # Pairwise min
(5:1)
(1:5)
diamonds %>% mutate(minxy = pmin(x,y)) %>% tbl_df
require(tidyr)
require(dplyr)
require(ggplot2)
diamonds %>% mutate(minxy = pmin(x,y)) %>% tbl_df
c(1,1,2,0,4,3,5) %>% cummin()
diamonds %>% mutate(cummin_x = cummin(x)) %>% tbl_df
diamonds %>% mutate(cummin_x = cummin(x)) %>% tbl_df View
diamonds %>% mutate(cummin_x = cummin(x)) %>% tbl_dfView
diamonds %>% mutate(cummin_x = cummin(x)) %>% View
diamonds %>% mutate(cumsum_x = cumsum(x)) %>% tbl_df
c(1,1,2,3,4,3,5) %>% cumsum()
c(1,1,2,3,4,3,5) %>% cumprod()
c(1,1,2,3,4,3,5) %>% between(2,4)
c(1:5) %>% lead() - c(1:5)
c(1:5) %>% lead()
c(1:5) %>% lag() - c(1:5)
c(1:10) %>% ntile(4) # bucket edges are rounded
c(1:12) %>% ntile(4) # bucket edges are rounded
c(1:10) %>% ntile(4) # bucket edges are rounded
diamonds %>% mutate(ntile_z = ntile(z,100)) %>% arrange(desc(ntile_z)) %>% tbl_df
diamonds %>% mutate(ntile_z = ntile(z,100)) %>% arrange(desc(ntile_z)) %>% View
c(1,1,2,5,4,3,5) %>% cume_dist()
c(1:5) %>% cume_dist()
c(1,1:5) %>% cume_dist()
diamonds %>% mutate(price_percent = cume_dist(price)) %>% filter(price_percent <= .20 | price_percent >= .80) %>% ggplot(aes(x = price, y = carat)) + geom_point(aes(color=cut))
diamonds %>% summarize(max_price = max(price)) # Equivalent SQL:select max(price) as max_price from diamonds;
diamonds %>% summarize(mean = mean(x), sum = sum(x,y,z), n = n())
diamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n()) %>% arrange(desc(n), cut, color)
diamonds %>% group_by(cut, color, clarity) %>% summarise(mean_carat = mean(carat)) %>% ggplot(aes(x=cut, y=mean_carat, color=color)) + geom_point() + facet_wrap(~clarity)
diamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n()) %>% arrange(n)
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% arrange(desc(x)) %>% tbl_df
require(tidyr)
require(dplyr)
require(ggplot2)
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% arrange(desc(x)) %>% tbl_df
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% arrange(desc(x), y) %>% tbl_df
diamonds %>% rename(tbl= table) %>% tbl_df # Equivalent: select tbl as "table" from diamonds;
diamonds %>% select(cut, clarity, x, y, z) %>% filter(cut %in% c("Good", "Fair"), clarity == "VS1" | is.na(cut)) %>% mutate(sum = x+y+z) %>% tbl_df # Equivalent: select cut, clarity, x+y+z as sum from diamonds where ((cut = 'Good' or cut = 'Fair') and clarity = 'VS1') or cut is null
diamonds %>% group_by(cut,color) %>% summarise(n = n()) %>% arrange(n) # Equivalent SQL: select cut, color, count(*) n from diamonds group by cut, color order by n;
diamonds %>% summarize(max_price = max(price)) # Equivalent SQL:select max(price) as max_price from diamonds;
require(tidyr)
require(dplyr)
require(ggplot2)
diamonds %>% summarize(max_price = max(price)) # Equivalent SQL:select max(price) as max_price from diamonds;
diamonds %>% summarize(mean = mean(x), sum = sum(x,y,z), n = n()) # Equivalent SQL:select avg(x) as avg, sum(x)+sum(y)+sum(z) as sum, count(*) as n from diamonds;
d <- diamonds %>% group_by(cut,color) %>% summarise(n = n()) %>% arrange(n) %>% tbl_df # Equivalent SQL: select cut, color, count(*) n from diamonds group by cut, color order by n;
View(d)
diamonds %>% group_by(cut, color, clarity) %>% summarise(mean_carat = mean(carat)) %>% ggplot(aes(x=cut, y=mean_carat, color=color)) + geom_point() + facet_wrap(~clarity)
require("jsonlite")
require(dplyr)
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
emp
require("jsonlite")
require(dplyr)
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View(df)
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
require(jsonlite)
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
dept <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from dept"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
library("RCurl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
dept <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from dept"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View(emp)
View(dept)
dplyr::inner_join(emp, dept, by="DEPTNO") %>% tbl_df
dplyr::left_join(emp, dept, by="DEPTNO") %>% tbl_df
dplyr::right_join(emp, dept, by="DEPTNO") %>% tbl_df
dplyr::full_join(emp, dept, by="DEPTNO") %>% tbl_df
dplyr::inner_join(emp, dept, by="DEPTNO") %>% View
dplyr::left_join(emp, dept, by="DEPTNO") %>% tbl_df
dplyr::left_join(emp, dept, by="DEPTNO") %>% View
dplyr::right_join(emp, dept, by="DEPTNO") %>% View
dplyr::full_join(emp, dept, by="DEPTNO") %>% View
dplyr::semi_join(emp, oneDept, by="DEPTNO") %>% tbl_df
dplyr::semi_join(emp, oneDept, by="DEPTNO") %>% tbl_df
oneDept <- dept %>% filter(DEPTNO == 10)
dplyr::semi_join(emp, oneDept, by="DEPTNO") %>% tbl_df
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"SELECT *
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"SELECT *
FROM emp e
WHERE EXISTS
(SELECT 1
FROM   dept d
WHERE  e.deptno = 10)
ORDER BY deptno;"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE))); tbl_df(df)
dplyr::intersect(dept, oneDept) %>% tbl_df
View(oneDept)
oneDept <- dept %>% filter(DEPTNO == 10)
View(oneDept)
dplyr::semi_join(emp, oneDept, by="DEPTNO") %>% tbl_df
dplyr::semi_join(emp, oneDept, by="DEPTNO") %>% View
View(oneDept)
View(df)
View(emp)
dplyr::anti_join(emp, oneDept, by="DEPTNO") %>% tbl_df
FLJoin <- dplyr::full_join(GF, FF, by=c("YEAR","MONTH"))
require("jsonlite")
require("RCurl")
require(dplyr)
require(lubridate)
# Change the USER and PASS below to be your UTEid
FF <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from FAMA_FRENCH"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_tl23642', PASS='orcl_tl23642', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
GF <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from GROWTH_FUND"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_tl23642', PASS='orcl_tl23642', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
GF<- GF %>% mutate(YEAR = year(parse_date_time(DATE_, "%m%d%y")))
GF<- GF %>% mutate(MONTH = month(parse_date_time(DATE_, "%m%d%y")))
FLJoin <- dplyr::full_join(GF, FF, by=c("YEAR","MONTH"))
View(FLJoin)
FLJoin <- FLJoin %>% mutate(retm_rf = (RETM*100 - RF))
View(FLJoin)
FLJoin <- FLJoin %>% mutate(retm_rf = (RETM*100))
View(FLJoin)
FJJoin[RETM]
FTJoin[RETM]
FLJoin[RETM]
FLJoin(RETM)
FLJoin[1]
FLJoin["RETM"]
FLJoin <- FLJoin %>% mutate(retm_rf = ('RETM' * 100))
FLJoin <- FLJoin %>% mutate(retm_rf = ('RETM') * 100)
FLJoin <- FLJoin %>% mutate(retm_rf = 'RETM' * 100)
retm_rf <- FLJoin['RETM']*100 - FLJoin['RF']
retm_rf <- FLJoin['RETM']*100 - FLJoin['RF']
retm_rf <- FLJoin['RETM']*100
retm_rf <- FLJoin['RETM']
View(retm_rf)
retm_rf <- as.numeric(FLJoin['RETM'])*100
View(retm_rf)
retm_rf <- as.numeric(FLJoin['RETM'])*100
FLJoin <- FLJoin %>% mutate(retm_rf = as.numeric('RETM') * 100)
View(FLJoin)
retm_rf <- as.numeric(as.character(FLJoin['RETM']))*100
FLJoin <- dplyr::inner_join(GF, FF, by=c("YEAR","MONTH"))
retm_rf <- as.numeric(FLJoin['RETM'])*100
FLJoin <- FLJoin %>% mutate(retm_rf = 'RETM' * 100)
FF <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from FAMA_FRENCH"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_tl23642', PASS='orcl_tl23642', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
GF<- GF %>% mutate(YEAR = year(parse_date_time(DATE_, "%m%d%y")))
GF<- GF %>% mutate(MONTH = month(parse_date_time(DATE_, "%m%d%y")))
InJoin <- dplyr::inner_join(GF, FF, by=c("YEAR","MONTH"))
InJoin <- InJoin %>% mutate(retm_rf = RETM * 100)
help("as.numeric")
is.numeric(3)
is.numeric(InJoin['RETM'])
as.numeric(InJoin['RETM'])
as.double(InJoin['RETM'])
data.matrix(InJoin['RETM'])
InJoin <- InJoin %>% mutate(retm_rf = data.matrix(RETM) * 100)
InJoin <- InJoin %>% mutate(retm_rf = data.matrix(InJoin['RETM']) * 100)
View(InJoin)
InJoin <- InJoin %>% mutate(retm_rf = data.matrix(InJoin['RETM']) /100)
InJoin <- InJoin %>% mutate(retm_rf = data.matrix(InJoin['RETM']) /100)
InJoin <- InJoin %>% mutate(retm_rf = data.matrix(InJoin['RETM']))
GF<- GF %>% mutate(YEAR = year(parse_date_time(DATE_, "%m%d%y")))
GF<- GF %>% mutate(MONTH = month(parse_date_time(DATE_, "%m%d%y")))
InJoin <- dplyr::inner_join(GF, FF, by=c("YEAR","MONTH"))
InJoin <- InJoin %>% mutate(retm_rf = data.matrix(InJoin['RETM']))
View(InJoin)
InJoin <- InJoin %>% mutate(retm_rf = as.data.frame.numeric(InJoin['RETM']))
GF<- GF %>% mutate(YEAR = year(parse_date_time(DATE_, "%m%d%y")))
GF<- GF %>% mutate(MONTH = month(parse_date_time(DATE_, "%m%d%y")))
InJoin <- dplyr::inner_join(GF, FF, by=c("YEAR","MONTH"))
InJoin <- InJoin %>% mutate(retm_rf = as.data.frame.numeric(InJoin['RETM']))
View(InJoin)
InJoin <- InJoin %>% mutate(retm_rf = as.numeric(InJoin['RETM']))
InJoin <- InJoin %>% mutate(retm_rf = as.numeric(unlist(InJoin['RETM']))
View(InJoin)
InJoin <- InJoin %>% mutate(retm_rf = as.numeric(unlist(InJoin['RETM']))
as.numeric(unlist(InJoin['RETM']))
as.numeric(unlist(InJoin['RETM']))
as.numeric(InJoin[4])
unlist(InJoin)
unlist(InJoin['RETM'])
View(InJoin)
InJoin <- InJoin %>% mutate(retm_rf = as.numeric(unlist(InJoin['RETM']))
retm <- as.numeric(unlist(InJoin['RETM']))
retm <- as.numeric(unlist(InJoin['RETM']))
retm[1]
View(GF)
View(InJoin)
retm <- as.numeric(unlist(InJoin['RETM']))
retm <- as.numeric(unlist(InJoin[4]))
retm[1]
retm[0]
retm[2]
View(GF)
retm <- as.numeric(unlist(GF[4]))
View(GF)
retm <- as.numeric(as.character(unlist(GF[4])))
> retm <- as.numeric(as.character(GF[4]))
retm <- as.numeric(as.character(GF[4]))
retm <- as.numeric(as.character(GF[4][1]))
retm <- as.numeric(as.character(GF[4][0]))
class(GF)
class(GF[1])
class(GF[4])
class(GF[4][1])
retm <- as.numeric(as.character(GF)
retm <- as.numeric(as.character(GF[4])
retm <- as.numeric(levels(GF[4][as.integer(GF[4])))
retm <- as.numeric(levels(GF[4][as.integer(GF[4])]))
retm <- as.numeric(unlist(levels(GF[4][as.integer(GF[4])))
retm <- as.numeric(unlist(levels(GF[4][as.integer(GF[4]))))
retm <- as.numeric(unlist(levels(GF[4][as.integer(GF[4])])))
data.class(GF)
data.class(GF[4])
GF[4]
gf[4] +1
GF[4] + 1
as.numeric(GF[4])
as.numeric(unlist(GF[4]))
unlist(GF[4])
retm <- unlist(InJoin[4])
retm <- data.frame(unlist(InJoin[4]))
View(retm)
retm[1]
retm
data.class(retm)
retm[0]
View(retm)
retm[1]
retm[1]*100
as.numeric(retm[1])
as.numeric(unlist(retm[1]))
View(retm)
is.double(retm)
is.double(retm[1])
as.double(retm[1])
retm[2]
retm[0]
retm[1]
retm <- unlist(InJoin[4])
retm[1]
retm[2]
retm[3]
retm(1)
retm('1')
as.character(retm)
as.numeric(as.character(retm[1]))
as.numeric(as.character(retm))
retm <- as.numeric(as.character(unlist(InJoin[4])))
InJoin <- InJoin %>% mutate(retm_rf = retm - RF)
View(InJoin)
InJoin <- InJoin %>% mutate(retm_rf = retm * 100 - RF)
View(InJoin)
InJoin <- InJoin %>% mutate(retm_rf = retm  - RF/100)
View(InJoin)
GF<- GF %>% mutate(RF = RF/100)
GF<- GF %>% mutate(RF = 'RF'/100)
FF<- FF %>% mutate(RF = RF/100)
FF<- FF %>% mutate(MKT_RF = MKT_RF/100)
InJoin <- dplyr::inner_join(GF, FF, by=c("YEAR","MONTH"))
retm <- as.numeric(as.character(unlist(InJoin[4])))
InJoin <- InJoin %>% mutate(retm_rf = retm  - RF)
View(InJoin)
fit <- lm(retm_rf ~ MKT_RF)
help(lm)
fit <- lm(retm_rf ~ MKT_RF, InJoin)
fit <- lm(retm_rf ~ MKT_RF, data = InJoin subset = ICDI)
fit <- lm(retm_rf ~ MKT_RF, data = InJoin, subset = ICDI)
summary(fit)
reg <- InJoin %>% group_by('ICDI') %>% lm(retm_rf ~ MKT_RF)
reg <- InJoin %>% group_by('ICDI') %>% lm(retm_rf ~ MKT_RF, data = InJoin)
reg <- InJoin %>% group_by('ICDI') %>% summarise(mean)
InJoin %>% group_by('ICDI') %>% summarise(mean)
InJoin %>% group_by('ICDI') %>% summarise(avg = mean)
InJoin %>% group_by(ICDI) %>% summarise(avg = mean)
InJoin %>% group_by(ICDI) %>% summarise(avg = mean)
diamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n()) %>% arrange(desc(n), cut, color)
InJoin %>% group_by(ICDI) %>% summarise(avg = mean)
InJoin %>% group_by(ICDI) %>% summarise(avg = mean) %>% tbl_df
InJoin %>% group_by(ICDI) %>% summarise(avg = mean(retm_rf)) %>% tbl_df
InJoin %>% group_by(ICDI) %>% summarise(avg = mean(retm_rf)) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point()
require(ggplot2)
InJoin %>% group_by(ICDI) %>% summarise(avg = mean(retm_rf)) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point()
InJoin %>% group_by(ICDI) %>% summarise(avg = mean(retm_rf)) %>% ggplot(aes(x=ICDI, y=avg))
InJoin %>% group_by(ICDI) %>% summarise(avg = mean(retm_rf)) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point() + facet_wrap(rf)
InJoin %>% group_by(ICDI) %>% summarise(avg = mean(retm_rf)) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point() + facet_wrap(RF)
InJoin %>% group_by(ICDI) %>% summarise(avg = mean(retm_rf, avg_mkt = mean(MKT_RF))) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point() + facet_wrap(avg_mkt)
InJoin %>% group_by(ICDI) %>% summarise(avg = mean(retm_rf, avg_mkt = mean(MKT_RF))) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point() + facet_wrap(~avg_mkt)
InJoin %>% group_by(ICDI) %>% summarise(avg = mean(retm_rf, avg_mkt = mean(MKT_RF))) %>% ggplot(aes(x=mkt_rf, y=avg, color = ICDI)) + geom_point()
InJoin %>% group_by(ICDI) %>% summarise(avg = mean(retm_rf), avg_mkt = mean(MKT_RF)) %>% ggplot(aes(x=mkt_rf, y=avg, color = ICDI)) + geom_point()
InJoin %>% group_by(ICDI) %>% summarise(avg = mean(retm_rf)), avg_mkt = mean(MKT_RF) %>% ggplot(aes(x=mkt_rf, y=avg, color = ICDI)) + geom_point()
InJoin %>% group_by(ICDI) %>% summarise(avg = mean(retm_rf)) avg_mkt = mean(MKT_RF) %>% ggplot(aes(x=mkt_rf, y=avg, color = ICDI)) + geom_point()
InJoin %>% group_by(ICDI) %>% summarise(avg = mean(retm_rf))%>% summarise(avg_mkt = mean(MKT_RF)) %>% ggplot(aes(x=mkt_rf, y=avg, color = ICDI)) + geom_point()
require("jsonlite")
require("RCurl")
require(dplyr)
require(lubridate)
require(ggplot2)
# Change the USER and PASS below to be your UTEid
FF <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from FAMA_FRENCH"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_tl23642', PASS='orcl_tl23642', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
GF <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from GROWTH_FUND"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_tl23642', PASS='orcl_tl23642', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
GF<- GF %>% mutate(YEAR = year(parse_date_time(DATE_, "%m%d%y")))
GF<- GF %>% mutate(MONTH = month(parse_date_time(DATE_, "%m%d%y")))
FF<- FF %>% mutate(RF = RF/100)
FF<- FF %>% mutate(MKT_RF= MKT_RF/100)
InJoin <- dplyr::inner_join(GF, FF, by=c("YEAR","MONTH"))
retm <- as.numeric(as.character(unlist(InJoin[4])))
InJoin <- InJoin %>% mutate(retm_rf = retm  - RF)
InJoin %>% group_by(ICDI) %>% summarise(avg = mean(retm_rf))%>% summarise(avg_mkt = mean(MKT_RF)) %>% ggplot(aes(x=mkt_rf, y=avg, color = ICDI)) + geom_point()
InJoin %>% group_by(ICDI) %>% summarise(avg = mean(retm_rf))%>% summarise(avg_mkt = mean(MKT_RF)) %>% ggplot(aes(x=avg_mkt, y=avg, color = ICDI)) + geom_point()
InJoin %>% group_by(ICDI) %>% summarise(avg = mean(retm_mkt)) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point()
InJoin <- InJoin %>% mutate(retm_mkt = retm  - MKT_RF)
InJoin %>% group_by(ICDI) %>% summarise(avg = mean(retm_mkt)) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point()
InJoin %>% group_by(ICDI) %>%filter(-1<retm_mkt<1)%>% summarise(avg = mean(retm_mkt)) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point()
InJoin %>% group_by(ICDI) %>%filter(retm_mkt<=1)%>% summarise(avg = mean(retm_mkt)) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point()
InJoin %>% group_by(ICDI) %>%filter(retm_mkt<=1)%>% summarise(avg = exp(mean(log(retm_mkt))) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point()
InJoin %>% group_by(ICDI) %>%filter(retm_mkt<=2)%>% summarise(avg = exp(mean(log(retm_mkt))) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point()
InJoin %>% group_by(ICDI) %>%filter(retm_mkt<=1)%>% summarise(avg = exp(mean(log(retm_mkt))) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point()
InJoin %>% group_by(ICDI) %>%filter(retm_mkt<=1)%>% summarise(avg = exp(mean(log(retm_mkt)))) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point()
InJoin %>% group_by(ICDI) %>%filter(retm_mkt<=1)%>% summarise(avg = mean(retm_mkt)) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point()
InJoin %>% group_by(ICDI) %>%filter(retm_mkt<=2)%>% summarise(avg = mean(retm_mkt)) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point()
InJoin %>% group_by(ICDI) %>%filter(!retm_mkt %in% c(outlier(value)))%>% summarise(avg = mean(retm_mkt)) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point()
require(outlier)
install.packages("outliers")
require(outliers)
InJoin %>% group_by(ICDI) %>%filter(!retm_mkt %in% c(outlier(value)))%>% summarise(avg = mean(retm_mkt)) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point()
InJoin %>% group_by(ICDI) %>%filter(!retm_mkt %in% c(outlier(retm_mkt)))%>% summarise(avg = mean(retm_mkt)) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point()
InJoin %>% group_by(ICDI) %>%filter(!retm_mkt %in% c(outlier(retm_mkt)))%>% summarise(avg = mean(retm_mkt)) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point()
InJoin %>% group_by(ICDI) %>%filter(retm_mkt<=2)%>% summarise(avg = mean(retm_mkt)) %>% ggplot(aes(x=ICDI, y=avg)) + geom_point()
source('~/DV_RProject3/03 Visualizations/Plot 1.R', echo=TRUE)
source('~/DV_RProject3/03 Visualizations/Plot 2.R', echo=TRUE)
source('~/DV_RProject3/03 Visualizations/Plot 2.R', echo=TRUE)
source('~/DV_RProject3/03 Visualizations/Plot 2.R', echo=TRUE)
source('~/DV_RProject3/03 Visualizations/Plot 2.R', echo=TRUE)
GF <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from GROWTH_FUND"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_tl23642', PASS='orcl_tl23642', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
require("jsonlite")
require("RCurl")
require(dplyr)
require(lubridate)
require(ggplot2)
require(graphics)
FF <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from FAMA_FRENCH"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_tl23642', PASS='orcl_tl23642', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
GF <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from GROWTH_FUND"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_tl23642', PASS='orcl_tl23642', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
OuterJ <- dplyr::right_join(GF, FF, by=c("YEAR","MONTH"))
retm <- as.numeric(as.character(unlist(OuterJ[4])))
OuterJ<- OuterJ%>% mutate(retm_rf = retm  - RF)
OuterJ <- OuterJ %>% mutate(retm_mkt = retm  - MKT_RF)
df <- OuterJ %>% filter(ICDI == 51)
fit <-lm(retm_rf~MKT_RF, data = df)
summary(fit)
OuterJ %>% filter(ICDI == 51)%>% ggplot(aes(x=MKT_RF, y=retm_rf)) + geom_point() + stat_smooth(method = "lm", col = "red")
source('~/DV_RProject3/03 Visualizations/Plot 3.R', echo=TRUE)
require("jsonlite")
require("RCurl")
require(dplyr)
require(lubridate)
require(ggplot2)
require(graphics)
FF <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from FAMA_FRENCH"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_tl23642', PASS='orcl_tl23642', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
GF <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from GROWTH_FUND"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_tl23642', PASS='orcl_tl23642', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
GF<- GF %>% mutate(YEAR = year(parse_date_time(DATE, "%m%d%y")))
GF<- GF %>% mutate(MONTH = month(parse_date_time(DATE, "%m%d%y")))
FF<- FF %>% mutate(RF = RF/100)
FF<- FF %>% mutate(MKT_RF= MKT_RF/100)
Antijoin <- dplyr::anti_join(GF, FF, by=c("YEAR","MONTH"))
Antijoin %>% group_by(ICDI) %>% summarise(count = n())
retm <- as.numeric(as.character(unlist(GF[4])))
GF %>% mutate(Retm = retm) %>% filter(ICDI == 51 |ICDI == 53| ICDI==64) %>% ggplot(aes(x=DATE,y=Retm,color=ICDI,group=ICDI)) + geom_line()
require("jsonlite")
require("RCurl")
require(dplyr)
require(lubridate)
require(ggplot2)
require(graphics)
FF <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from FAMA_FRENCH"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_tl23642', PASS='orcl_tl23642', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
GF <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from GROWTH_FUND"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_tl23642', PASS='orcl_tl23642', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
GF<- GF %>% mutate(YEAR = year(parse_date_time(DATE, "%m%d%y")))
GF<- GF %>% mutate(MONTH = month(parse_date_time(DATE, "%m%d%y")))
FF<- FF %>% mutate(RF = RF/100)
FF<- FF %>% mutate(MKT_RF= MKT_RF/100)
Antijoin <- dplyr::anti_join(GF, FF, by=c("YEAR","MONTH"))
Antijoin %>% group_by(ICDI) %>% summarise(count = n())
retm <- as.numeric(as.character(unlist(GF[4])))
GF %>% mutate(Retm = retm) %>% filter(ICDI == 51 |ICDI == 53| ICDI==64) %>% ggplot(aes(x=DATE_,y=Retm,color=ICDI,group=ICDI)) + geom_line()
OuterJ %>% filter(ICDI == 51)%>% ggplot(aes(x=MKT_RF, y=retm_rf)) + geom_point() + stat_smooth(method = "lm", col = "red")
df <- OuterJ %>% filter(ICDI == 51)
fit <-lm(retm_rf~MKT_RF, data = df)
summary(fit)
GF %>% mutate(Retm = retm) %>% filter(ICDI == 51 |ICDI == 53| ICDI==64) %>% ggplot(aes(x=DATE_,y=Retm,color=ICDI,group=ICDI)) + geom_line()
source('~/DV_RProject3/03 Visualizations/Plot 2.R', echo=TRUE)
source('~/DV_RProject3/03 Visualizations/Plot 2.R', echo=TRUE)
source('~/DV_RProject3/03 Visualizations/Plot 3.R', echo=TRUE)
We used anti-join to minimize the effect of missing data on risk free rate from the market data
source('~/DV_RProject2/02 Data Wrangling/sql_to_R.R', echo=TRUE)
View(df)
sum(df[5])
sum(if(df[9]==60))
sum(if(df[9]==60))
temp <- df[5]
View(df)
setwd("/Users/Fred/DV_RProject4/03 Data")
file_path <- "air_quality.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df)
setwd("/Users/Fred/DV_RProject4/03 Data")
file_path <- "air_quality.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("End_Date", "End-Time", "PM10", "NO2")
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
# Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                        \_/
df$Order_Date <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Order_Date), tz="UTC")))
df$Ship_Date  <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Ship_Date),  tz="UTC")))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
